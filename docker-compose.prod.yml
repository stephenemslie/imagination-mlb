version: '3.2'
services:
    nginx:
        image: jwilder/nginx-proxy
        ports:
            - "80:80"
        restart: always
        volumes:
            - "/var/run/docker.sock:/tmp/docker.sock:ro"
    postgres:
        restart: always
        volumes:
            - "pgdata:/var/lib/postgresql/data"
        deploy:
            placement:
                constraints:
                    - node.role == manager
    postgres-backup:
        image: localhost:5000/postgres-backup-s3:latest
        build:
            context: ./postgres_backup
        depends_on:
            - postgres
        environment:
            SCHEDULE: "@daily"
            S3_BUCKET: mlb-backups
            S3_PREFIX: 'postgresql-nuc'
            POSTGRES_DATABASE: postgres
            POSTGRES_USER: postgres
            POSTGRES_HOST: postgres
        secrets:
            - POSTGRES_PASSWORD
            - S3_SECRET_ACCESS_KEY
            - S3_ACCESS_KEY_ID

    django:
        image: localhost:5000/mlb_django:latest
        environment:
            DEBUG: 'False'
            GUNICORN_CMD_ARGS: '--bind=0.0.0.0:8000 --workers=2'
            VIRTUAL_HOST: mlb-queue.imagination.net
            DJANGO_ALLOWED_HOSTS: "*"
            CORS_ORIGIN_ALLOW_ALL: 'True'
        volumes:
            - /dev/serial/by-id/usb-ENTTEC_DMX_USB_PRO_EN211286-if00-port0:/dev/host-dmx
        ports:
            - "8000:8000"
        depends_on:
            - postgres
            - nginx
        command: gunicorn
        restart: always
        deploy:
            mode: global
        secrets:
            - SLACK_TOKEN

volumes:
    pgdata:

secrets:
    S3_ACCESS_KEY_ID:
        file: ./secrets/aws_access_key_id
    S3_SECRET_ACCESS_KEY:
        file: ./secrets/aws_secret_access_key
    SLACK_TOKEN:
        file: ./secrets/slack_token
